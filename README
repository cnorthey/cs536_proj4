CS 536: PROJECT 3 - CSX TYPE CHECKER

Caela Northey (cs login: caela)	905 653 2238 
Alan Irish    (cs login: irish) 906 591 2819


DUE DATE: FRIDAY NOV 22, 2013

********************************************************************************

For this project we will implement a type checker for CSX. This uses parts from
previous projects 1 - 3, namely a block structered symbol table, a scanner, and
a parser. Relevant files (i.e., SybmolInfo.java csx.jlex, csx.cup) are included.
To build the type checker, we will be building off of a sample type checker 
provided for us that verifies CSX-lite. This involves walking the abstract
syntax tree and type checking each node. The main files we will be modifying
are:

	TypeChecking.java: to implement type checking for non-CSXLite features, we
                     expand the given code to walk the CSX-style abstract
                     syntax tree.

	SymbolInfo.java: updated to handle arrays and methods as follows.
    - public int arraySize was added to to give access to arraySize elsewhere
      in code when we didn't have access to the arrayDeclNode. All
      SymbolInfo objects have this field set to -1 in the constructor so that
      non-arrays don't have to deal with clunky constructor uses; a seperate
      public function (setArraySiz()) must be used with arrays upon their
      insertion into the symbol table to correct this.
    - to keep track of method entries in the symbol table, we have to store
      the number of parameters and each ones type and kind. That way, we can
      verify that each method call is valid. To do this, we store an ArrayList
      of 

	Other relevant files: SymbolTable.java, parmInfo.java


TO DO::
 x create git repo 
 x divvy up code a la Unparsing.java of proj 3
 - Caela: callNode, fctCallNode, argsNode, returnNode + better error messages

QUESTIONS:
 - how do we incorporate code from proj 1? SymbolInfo.java?
 - how to handle identNode type? how tell difference b/w types? ./src/ast.java
 - for nameNode:
		-> how check subscriptVal kind is scalar? exprOptionNode...cast as
       exprNode!! has type/kind fields

